buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0"
    }
}
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'io.codearte.nexus-staging'

group 'com.remondis.test'
version '1.0.1-SNAPSHOT'



publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'com.remondis:remap:4.0.1'
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.18.0"
    testCompile "org.assertj:assertj-core:3.9.1"

    testCompile "org.springframework:spring-test:4.3.16.RELEASE"
    testCompile "org.springframework:spring-context:4.3.16.RELEASE"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

jar {
    manifest {
        attributes("Bundle-Vendor": "REMONDIS IT Services GmbH & Co. KG",
                "Bundle-DocURL": "https://github.com/remondis-it/remap",
                "Automatic-Module-Name": "com.remondis.remap")
    }
}

/*---------------  For Jigsaw  ------------------*/
//  Defines a variable for the module name
ext.moduleName = 'com.remondis.azubi.test.jigsaw.head'

// 	Clears the classpath property by creating an empty file collection
compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

//Redifines the classpath/modulepath
compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'junit',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

test {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-reads', "$moduleName=junit",
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
        ]
        classpath = files()
    }
}

subprojects {
    afterEvaluate {
        repositories {
            jcenter()
        }

        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        compileTestJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'junit',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }

        test {
            inputs.property("moduleName", moduleName)
            doFirst {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=junit",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }
    }
}
/*----------------------------------------------*/





